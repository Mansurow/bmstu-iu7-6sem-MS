clear all;
X = [1.52,1.26,2.17,1.75,-0.19,2.24,2.76,1.52,1.89,3.10,2.61,1.18,1.83,...
    1.85,3.39,2.31,2.99,1.61,2.57,1.81,1.73,1.89,-0.00,2.27,1.61,2.57,...
    2.54,1.67,1.49,0.12,-0.04,1.36,2.04,2.04,-0.05,0.67,1.32,0.78,0.89,...
    2.73,1.51,1.48,1.67,2.18,1.70,4.20,1.81,2.66,1.72,0.77,3.16,1.86,...
    3.66,4.30,0.98,3.00,0.99,1.72,2.71,2.47,2.56,1.99,0.23,0.66,...
    2.47,2.71,2.28,2.59,3.30,2.08,0.90,0.49,2.38,0.71,0.10,1.50,...
    0.21,0.44,3.94,1.50,1.70,-0.73,1.76,2.71,1.95,-0.71,1.32,...
    3.95,2.64,-0.04,3.24,1.67,2.31,0.18,0.79,3.26,3.44,2.64,0.89,...
    2.47,4.02,2.12,0.61,2.59,1.44,1.82,2.94,3.03,1.97,2.30,0.80,0.52,...
    1.21,2.13,2.82,1.56,2.84,3.54,0.86,0.42];   

% Нахождение минимального значения выборки
Xmin = min(X);
% Нахождение максимального значения выборки
Xmax = max(X);
% Нахождения размаха выборки
R = range(X); %  Xmax - Xmin;
% Нахождение выборочного математического ожидания
n = length(X);
fprintf("n = %d\n", n);
mu = mean(X); % sum(X) / n;
% Нахождение исправленной выборочной дисперсии
Ssquare = var(X); % var (x) = sum((X - mu).^2) / (n - 1);
% Нахождение количества полуинтервалов
m = fix(log2(n)) + 2;
% Упорядочение полуинтервалов
[y1, x1] = hist(X, m);
% Нормирование полуинтервалов
norm_y1 = y1 / (sum(y1) * (x1(2) - x1(1)));

Xsigma = sqrt(Ssquare);
step = Xsigma * 1e-2;
delta = 1;

% Вывод результатов
fprintf('Минимальное значение выборки: %.3f\n', Xmin);
fprintf('Максимальное значение выборки: %.3f\n', Xmax);
fprintf('Размах выборки: %.3f\n', R);
fprintf('Выборочное математическое ожидание: %.3f\n', mu);
fprintf('Исправленная выборочная дисперсия: %.3f\n', Ssquare);

fprintf('Промежутки, количество:\n');
for i = 1 : length(x1)
    l = x1(i) - R / (2 * m);
    r = x1(i) + R / (2 * m);
    count = y1(i);
    % end_bracket = ifelse(i == length(x1), ']', ')');
    if (i == length(x1))
        fprintf('  %d. [%.3f; %.3f%c,\t%d вхождений\n', i, l, r, ")", count);
    else
        fprintf('  %d. [%.3f; %.3f%c,\t%d вхождений\n', i, l, r, "]", count);
    end    
end

% Значение на оси абсцисс для нормального распределения
x = (mu - R) - 2*delta : step : (mu + R) + 2*delta;
% Вычисление плотности вероятностей для нормального распределения
f = normpdf(x, mu, Xsigma);
% Вычисление функции распределения вероятностей для нормального распределения
F = normcdf(x, mu, Xsigma);

% Вывод плотностей вероятностей
figure('Name', 'Функция плотности распределения вероятностей')
bar(x1, norm_y1, 1);
hold on;
plot(x, f, 'LineWidth', 1.5, 'color', 'red');
hold off;

% Вывод функций распределения вероятностей
figure('Name', 'Функция распределения вероятностей')
[F_empirical, x_empirical] = ecdf(X);
% F_empirical = [0; F_empirical; 1];
% x_empirical = [(mu - R) - 2*delta; x_empirical; (mu + R) + 2*delta];

axis tight;
hold on;
Res_x = [];
Res_y = [];
for i = 1: length(x_empirical)
    if (x_empirical(i) == -0.73)
        fprintf('%d\n', x_empirical(i));
        Res_x = [Res_x; X(i)];
    end    
end    

n_min = length(Res_x);
printf("n_min = %d\n", n_min);

%stairs([-4; x_empirical; 6], [0; F_empirical; 1]);
plot([-2; x_empirical; 6], [0; F_empirical; 1],'LineWidth', 1.5);
plot(x, F, 'LineWidth', 1.5, 'color', 'red');
hold off;

